{"ast":null,"code":"var _jsxFileName = \"/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongLookup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./SongLookup.css\";\nimport { Container, Form } from 'react-bootstrap';\nimport useAuth from './useAuth';\nimport SpotifyWebApi from \"spotify-web-api-js\"; //const spotifyApi = new SpotifyWebApi({clientId:'6ca42bd62f0542959053535545c73611',});\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SongLookup(_ref) {\n  _s();\n\n  let {\n    spotify\n  } = _ref;\n  // const accessToken = useAuth(spotify);\n  // console.log(accessToken);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]); // useEffect(() => {\n  //     if (!accessToken) return;\n  //     spotifyApi.setAccessToken(accessToken);\n  // }, [accessToken]);\n\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    let cancel = false;\n    spotify.searchTracks(search).then(res => {\n      if (cancel) return; // setSearchResults(\n      //     res.body.tracks.items.map(track => {\n      //         const smallestAlbumImage = track.album.images.reduce(\n      //             (smallest, image) => {\n      //                 if (image.height < smallest.height) return image\n      //                 return smallest;\n      //             },\n      //             track.album.images[0]\n      //         )\n      //         return {\n      //             artist: track.artists[0].name,\n      //             title: track.name,\n      //             uri: track.uri,\n      //             albumUrl: smallestAlbumImage.url,\n      //         }\n      //     })\n      // )\n\n      console.log(\"res: \", res);\n    });\n    return () => cancel = true;\n  }, [search]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SongLookup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Type in a Song, Artist, or Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SongLookup, \"LTgYVyrwcc/OxagTfuzeEYdwPNk=\");\n\n_c = SongLookup;\nexport default SongLookup;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongLookup\");","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongLookup.js"],"names":["React","useState","useEffect","Container","Form","useAuth","SpotifyWebApi","SongLookup","spotify","search","setSearch","searchResults","setSearchResults","cancel","searchTracks","then","res","console","log","height","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAO,kBAAP;AACA,SAAQC,SAAR,EAAkBC,IAAlB,QAA6B,iBAA7B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,aAAP,MAA2B,oBAA3B,C,CAEA;;;;AAEA,SAASC,UAAT,OAA+B;AAAA;;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;AAE3B;AACA;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,EAAD,CAAlD,CAL2B,CAO3B;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,MAAL,EAAa,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACb,QAAIC,MAAM,GAAG,KAAb;AACAL,IAAAA,OAAO,CAACM,YAAR,CAAqBL,MAArB,EAA6BM,IAA7B,CAAkCC,GAAG,IAAI;AACrC,UAAIH,MAAJ,EAAY,OADyB,CAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,GAApB;AACH,KArBD;AAuBA,WAAO,MAAOH,MAAM,GAAG,IAAvB;AAGH,GA7BQ,EA6BN,CAACJ,MAAD,CA7BM,CAAT;AA+BA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAA+C,MAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAE;AAAV,OAAtD;AAAA,6BACI,QAAC,IAAD,CAAM,OAAN;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,WAAW,EAAC,sBAFhB;AAGI,QAAA,KAAK,EAAEV,MAHX;AAII,QAAA,QAAQ,EAAEW,CAAC,IAAIV,SAAS,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA1DQf,U;;KAAAA,U;AA4DT,eAAeA,UAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport \"./SongLookup.css\"\nimport {Container,Form} from 'react-bootstrap';\nimport useAuth from './useAuth';\nimport SpotifyWebApi  from \"spotify-web-api-js\";\n\n//const spotifyApi = new SpotifyWebApi({clientId:'6ca42bd62f0542959053535545c73611',});\n\nfunction SongLookup({spotify}) {\n\n    // const accessToken = useAuth(spotify);\n    // console.log(accessToken);\n    const [search, setSearch] = useState(\"\");\n    const [searchResults, setSearchResults] = useState([])\n\n    // useEffect(() => {\n    //     if (!accessToken) return;\n    //     spotifyApi.setAccessToken(accessToken);\n    // }, [accessToken]);\n\n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        let cancel = false;\n        spotify.searchTracks(search).then(res => {\n            if (cancel) return;\n            // setSearchResults(\n            //     res.body.tracks.items.map(track => {\n            //         const smallestAlbumImage = track.album.images.reduce(\n            //             (smallest, image) => {\n            //                 if (image.height < smallest.height) return image\n            //                 return smallest;\n            //             },\n            //             track.album.images[0]\n            //         )\n\n            //         return {\n            //             artist: track.artists[0].name,\n            //             title: track.name,\n            //             uri: track.uri,\n            //             albumUrl: smallestAlbumImage.url,\n            //         }\n            //     })\n            // )\n            console.log(\"res: \",res);\n        })\n\n        return () => (cancel = true)\n\n\n    }, [search])\n\n    return (\n        <div className=\"SongLookup\">\n            <h3>Type in a Song, Artist, or Album</h3>\n            <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n                <Form.Control\n                    type=\"search\"\n                    placeholder=\"Search Songs/Artists\"\n                    value={search}\n                    onChange={e => setSearch(e.target.value)}\n                />\n\n\n            </Container>\n        </div>\n    )\n}\n\nexport default SongLookup\n"]},"metadata":{},"sourceType":"module"}