{"ast":null,"code":"var _jsxFileName = \"/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongLookup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"./SongLookup.css\";\nimport { Container, Form } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotify = new SpotifyWebApi({\n  clientId: '6ca42bd62f0542959053535545c73611'\n});\n\nfunction SongLookup(_ref) {\n  _s();\n\n  let {\n    spotify\n  } = _ref;\n  const accessToken = useAuth(spotify);\n  console.log(accessToken);\n  const [search, setSearch] = useState();\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotify.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    let cancel = false;\n    spotify.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SongLookup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Type in a Song, Artist, or Album\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"d-flex flex-column py-2\",\n      style: {\n        height: \"100vh\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"search\",\n        placeholder: \"Search Songs/Artists\",\n        value: search,\n        onChange: e => setSearch(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SongLookup, \"FcUVarQzMIyZYUn+FbHnP9eSnDU=\", true);\n\n_c = SongLookup;\nexport default SongLookup;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongLookup\");","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongLookup.js"],"names":["React","useState","useEffect","Container","Form","spotify","SpotifyWebApi","clientId","SongLookup","accessToken","useAuth","console","log","search","setSearch","searchResults","setSearchResults","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","track","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAO,kBAAP;AACA,SAAQC,SAAR,EAAkBC,IAAlB,QAA6B,iBAA7B;;AACA,MAAMC,OAAO,GAAG,IAAIC,aAAJ,CAAkB;AAACC,EAAAA,QAAQ,EAAC;AAAV,CAAlB,CAAhB;;AACA,SAASC,UAAT,OAA+B;AAAA;;AAAA,MAAX;AAACH,IAAAA;AAAD,GAAW;AAE3B,QAAMI,WAAW,GAAGC,OAAO,CAACL,OAAD,CAA3B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBb,QAAQ,EAApC;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,WAAL,EAAkB;AAClBJ,IAAAA,OAAO,CAACY,cAAR,CAAuBR,WAAvB;AACH,GAHQ,EAGN,CAACA,WAAD,CAHM,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACW,MAAL,EAAa,OAAOG,gBAAgB,CAAC,EAAD,CAAvB;AACb,QAAIE,MAAM,GAAG,KAAb;AACAb,IAAAA,OAAO,CAACc,YAAR,CAAqBN,MAArB,EAA6BO,IAA7B,CAAkCC,GAAG,IAAI;AACrC,UAAIH,MAAJ,EAAY;AACZF,MAAAA,gBAAgB,CACZK,GAAG,CAACC,IAAJ,CAASC,MAAT,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BC,KAAK,IAAI;AAC/B,cAAMC,kBAAkB,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,MAAnB,CACvB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACjB,cAAIA,KAAK,CAACC,MAAN,GAAeF,QAAQ,CAACE,MAA5B,EAAoC,OAAOD,KAAP;AACpC,iBAAOD,QAAP;AACH,SAJsB,EAKvBL,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmB,CAAnB,CALuB,CAA3B;AAQA,eAAO;AACHK,UAAAA,MAAM,EAAER,KAAK,CAACS,OAAN,CAAc,CAAd,EAAiBC,IADtB;AAEHC,UAAAA,KAAK,EAAEX,KAAK,CAACU,IAFV;AAGHE,UAAAA,GAAG,EAAEZ,KAAK,CAACY,GAHR;AAIHC,UAAAA,QAAQ,EAAEZ,kBAAkB,CAACa;AAJ1B,SAAP;AAMH,OAfD,CADY,CAAhB;AAkBH,KApBD;AAsBA,WAAO,MAAOtB,MAAM,GAAG,IAAvB;AAGH,GA5BQ,EA4BN,CAACL,MAAD,CA5BM,CAAT;AA8BA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,yBAArB;AAA+C,MAAA,KAAK,EAAE;AAAEoB,QAAAA,MAAM,EAAE;AAAV,OAAtD;AAAA,6BACI,QAAC,IAAD,CAAM,OAAN;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,WAAW,EAAC,sBAFhB;AAGI,QAAA,KAAK,EAAEpB,MAHX;AAII,QAAA,QAAQ,EAAE4B,CAAC,IAAI3B,SAAS,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV;AAJ5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAvDQnC,U;;KAAAA,U;AAyDT,eAAeA,UAAf","sourcesContent":["import React, {useState,useEffect} from 'react'\nimport \"./SongLookup.css\"\nimport {Container,Form} from 'react-bootstrap';\nconst spotify = new SpotifyWebApi({clientId:'6ca42bd62f0542959053535545c73611',});\nfunction SongLookup({spotify}) {\n\n    const accessToken = useAuth(spotify);\n    console.log(accessToken);\n    const [search, setSearch] = useState();\n    const [searchResults, setSearchResults] = useState([])\n    useEffect(() => {\n        if (!accessToken) return;\n        spotify.setAccessToken(accessToken);\n    }, [accessToken]);\n    useEffect(() => {\n        if (!search) return setSearchResults([])\n        let cancel = false;\n        spotify.searchTracks(search).then(res => {\n            if (cancel) return;\n            setSearchResults(\n                res.body.tracks.items.map(track => {\n                    const smallestAlbumImage = track.album.images.reduce(\n                        (smallest, image) => {\n                            if (image.height < smallest.height) return image\n                            return smallest;\n                        },\n                        track.album.images[0]\n                    )\n\n                    return {\n                        artist: track.artists[0].name,\n                        title: track.name,\n                        uri: track.uri,\n                        albumUrl: smallestAlbumImage.url,\n                    }\n                })\n            )\n        })\n\n        return () => (cancel = true)\n\n\n    }, [search])\n\n    return (\n        <div className=\"SongLookup\">\n            <h3>Type in a Song, Artist, or Album</h3>\n            <Container className=\"d-flex flex-column py-2\" style={{ height: \"100vh\" }}>\n                <Form.Control\n                    type=\"search\"\n                    placeholder=\"Search Songs/Artists\"\n                    value={search}\n                    onChange={e => setSearch(e.target.value)}\n                />\n\n\n            </Container>\n        </div>\n    )\n}\n\nexport default SongLookup\n"]},"metadata":{},"sourceType":"module"}