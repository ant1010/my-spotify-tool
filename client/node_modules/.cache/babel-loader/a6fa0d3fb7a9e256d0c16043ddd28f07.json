{"ast":null,"code":"/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n  if (typeof object !== \"object\" || object === null) {\n    return 0\n    /* ObjectType.NOT */\n    ;\n  }\n\n  if (Array.isArray(object)) {\n    return 2\n    /* ObjectType.ARRAY */\n    ;\n  }\n\n  if (isRecord(object)) {\n    return 1\n    /* ObjectType.RECORD */\n    ;\n  }\n\n  if (object instanceof Set) {\n    return 3\n    /* ObjectType.SET */\n    ;\n  }\n\n  if (object instanceof Map) {\n    return 4\n    /* ObjectType.MAP */\n    ;\n  }\n\n  return 5\n  /* ObjectType.OTHER */\n  ;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\n\n\nfunction getKeys(objects) {\n  const keys = new Set();\n  /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n\n  for (const object of objects) {\n    for (const key of [...Object.keys(object), ...Object.getOwnPropertySymbols(object)]) {\n      keys.add(key);\n    }\n  }\n  /* eslint-enable functional/no-loop-statement */\n\n\n  return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\n\n\nfunction objectHasProperty(object, property) {\n  return typeof object === \"object\" && Object.prototype.propertyIsEnumerable.call(object, property);\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\n\n\nfunction getIterableOfIterables(iterables) {\n  return {\n    *[Symbol.iterator]() {\n      // eslint-disable-next-line functional/no-loop-statement\n      for (const iterable of iterables) {\n        // eslint-disable-next-line functional/no-loop-statement\n        for (const value of iterable) {\n          yield value;\n        }\n      }\n    }\n\n  };\n}\n\nconst validRecordToStringValues = new Set([\"[object Object]\", \"[object Module]\"]);\n/**\n * Does the given object appear to be a record.\n */\n\nfunction isRecord(value) {\n  // All records are objects.\n  if (!validRecordToStringValues.has(Object.prototype.toString.call(value))) {\n    return false;\n  }\n\n  const {\n    constructor\n  } = value; // If has modified constructor.\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  if (constructor === undefined) {\n    return true;\n  } // eslint-disable-next-line prefer-destructuring\n\n\n  const prototype = constructor.prototype; // If has modified prototype.\n\n  if (prototype === null || typeof prototype !== \"object\" || !validRecordToStringValues.has(Object.prototype.toString.call(prototype))) {\n    return false;\n  } // If constructor does not have an Object-specific method.\n  // eslint-disable-next-line sonarjs/prefer-single-boolean-return, no-prototype-builtins\n\n\n  if (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n    return false;\n  } // Most likely a record.\n\n\n  return true;\n}\n\nconst defaultMergeFunctions = {\n  mergeMaps: defaultMergeMaps,\n  mergeSets: defaultMergeSets,\n  mergeArrays: defaultMergeArrays,\n  mergeRecords: defaultMergeRecords,\n  mergeOthers: leaf\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\n\nconst actions = {\n  defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n  skip: Symbol(\"deepmerge-ts: skip\")\n};\n/**\n * The default function to update meta data.\n */\n\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n  return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\n\n\nfunction deepmerge() {\n  return deepmergeCustom({})(...arguments);\n}\n\nfunction deepmergeCustom(options, rootMetaData) {\n  const utils = getUtils(options, customizedDeepmerge);\n  /**\n   * The customized deepmerge function.\n   */\n\n  function customizedDeepmerge() {\n    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {\n      objects[_key] = arguments[_key];\n    }\n\n    return mergeUnknowns(objects, utils, rootMetaData);\n  }\n\n  return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\n\n\nfunction getUtils(options, customizedDeepmerge) {\n  var _a, _b;\n\n  return {\n    defaultMergeFunctions,\n    mergeFunctions: { ...defaultMergeFunctions,\n      ...Object.fromEntries(Object.entries(options).filter(_ref => {\n        let [key, option] = _ref;\n        return Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key);\n      }).map(_ref2 => {\n        let [key, option] = _ref2;\n        return option === false ? [key, leaf] : [key, option];\n      }))\n    },\n    metaDataUpdater: (_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater,\n    deepmerge: customizedDeepmerge,\n    useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n    actions\n  };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\n\n\nfunction mergeUnknowns(values, utils, meta) {\n  if (values.length === 0) {\n    return undefined;\n  }\n\n  if (values.length === 1) {\n    return mergeOthers(values, utils, meta);\n  }\n\n  const type = getObjectType(values[0]); // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n\n  if (type !== 0\n  /* ObjectType.NOT */\n  && type !== 5\n  /* ObjectType.OTHER */\n  ) {\n    // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n    for (let m_index = 1; m_index < values.length; m_index++) {\n      if (getObjectType(values[m_index]) === type) {\n        continue;\n      }\n\n      return mergeOthers(values, utils, meta);\n    }\n  }\n\n  switch (type) {\n    case 1\n    /* ObjectType.RECORD */\n    :\n      return mergeRecords(values, utils, meta);\n\n    case 2\n    /* ObjectType.ARRAY */\n    :\n      return mergeArrays(values, utils, meta);\n\n    case 3\n    /* ObjectType.SET */\n    :\n      return mergeSets(values, utils, meta);\n\n    case 4\n    /* ObjectType.MAP */\n    :\n      return mergeMaps(values, utils, meta);\n\n    default:\n      return mergeOthers(values, utils, meta);\n  }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\n\n\nfunction mergeRecords(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeRecords !== utils.defaultMergeFunctions.mergeRecords) {\n    return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n  }\n\n  return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction mergeArrays(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeArrays !== utils.defaultMergeFunctions.mergeArrays) {\n    return utils.defaultMergeFunctions.mergeArrays(values);\n  }\n\n  return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction mergeSets(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets) {\n    return utils.defaultMergeFunctions.mergeSets(values);\n  }\n\n  return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction mergeMaps(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps) {\n    return utils.defaultMergeFunctions.mergeMaps(values);\n  }\n\n  return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\n\n\nfunction mergeOthers(values, utils, meta) {\n  const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n\n  if (result === actions.defaultMerge || utils.useImplicitDefaultMerging && result === undefined && utils.mergeFunctions.mergeOthers !== utils.defaultMergeFunctions.mergeOthers) {\n    return utils.defaultMergeFunctions.mergeOthers(values);\n  }\n\n  return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\n\n\nfunction defaultMergeRecords(values, utils, meta) {\n  const result = {};\n  /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n\n  for (const key of getKeys(values)) {\n    const propValues = [];\n\n    for (const value of values) {\n      if (objectHasProperty(value, key)) {\n        propValues.push(value[key]);\n      }\n    }\n\n    if (propValues.length === 0) {\n      continue;\n    }\n\n    const updatedMeta = utils.metaDataUpdater(meta, {\n      key,\n      parents: values\n    });\n    const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n\n    if (propertyResult === actions.skip) {\n      continue;\n    }\n\n    if (key === \"__proto__\") {\n      Object.defineProperty(result, key, {\n        value: propertyResult,\n        configurable: true,\n        enumerable: true,\n        writable: true\n      });\n    } else {\n      result[key] = propertyResult;\n    }\n  }\n  /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n\n\n  return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\n\n\nfunction defaultMergeArrays(values) {\n  return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\n\n\nfunction defaultMergeSets(values) {\n  return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\n\n\nfunction defaultMergeMaps(values) {\n  return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\n\n\nfunction leaf(values) {\n  return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/spotify-clone/client/node_modules/deepmerge-ts/dist/node/index.mjs"],"names":["getObjectType","object","Array","isArray","isRecord","Set","Map","getKeys","objects","keys","key","Object","getOwnPropertySymbols","add","objectHasProperty","property","prototype","propertyIsEnumerable","call","getIterableOfIterables","iterables","Symbol","iterator","iterable","value","validRecordToStringValues","has","toString","constructor","undefined","hasOwnProperty","defaultMergeFunctions","mergeMaps","defaultMergeMaps","mergeSets","defaultMergeSets","mergeArrays","defaultMergeArrays","mergeRecords","defaultMergeRecords","mergeOthers","leaf","actions","defaultMerge","skip","defaultMetaDataUpdater","previousMeta","metaMeta","deepmerge","deepmergeCustom","options","rootMetaData","utils","getUtils","customizedDeepmerge","mergeUnknowns","_a","_b","mergeFunctions","fromEntries","entries","filter","option","map","metaDataUpdater","useImplicitDefaultMerging","enableImplicitDefaultMerging","values","meta","length","type","m_index","result","propValues","push","updatedMeta","parents","propertyResult","defineProperty","configurable","enumerable","writable","flat"],"mappings":"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","sourcesContent":["/**\n * Get the type of the given object.\n *\n * @param object - The object to get the type of.\n * @returns The type of the given object.\n */\nfunction getObjectType(object) {\n    if (typeof object !== \"object\" || object === null) {\n        return 0 /* ObjectType.NOT */;\n    }\n    if (Array.isArray(object)) {\n        return 2 /* ObjectType.ARRAY */;\n    }\n    if (isRecord(object)) {\n        return 1 /* ObjectType.RECORD */;\n    }\n    if (object instanceof Set) {\n        return 3 /* ObjectType.SET */;\n    }\n    if (object instanceof Map) {\n        return 4 /* ObjectType.MAP */;\n    }\n    return 5 /* ObjectType.OTHER */;\n}\n/**\n * Get the keys of the given objects including symbol keys.\n *\n * Note: Only keys to enumerable properties are returned.\n *\n * @param objects - An array of objects to get the keys of.\n * @returns A set containing all the keys of all the given objects.\n */\nfunction getKeys(objects) {\n    const keys = new Set();\n    /* eslint-disable functional/no-loop-statement -- using a loop here is more efficient. */\n    for (const object of objects) {\n        for (const key of [\n            ...Object.keys(object),\n            ...Object.getOwnPropertySymbols(object),\n        ]) {\n            keys.add(key);\n        }\n    }\n    /* eslint-enable functional/no-loop-statement */\n    return keys;\n}\n/**\n * Does the given object have the given property.\n *\n * @param object - The object to test.\n * @param property - The property to test.\n * @returns Whether the object has the property.\n */\nfunction objectHasProperty(object, property) {\n    return (typeof object === \"object\" &&\n        Object.prototype.propertyIsEnumerable.call(object, property));\n}\n/**\n * Get an iterable object that iterates over the given iterables.\n */\nfunction getIterableOfIterables(iterables) {\n    return {\n        *[Symbol.iterator]() {\n            // eslint-disable-next-line functional/no-loop-statement\n            for (const iterable of iterables) {\n                // eslint-disable-next-line functional/no-loop-statement\n                for (const value of iterable) {\n                    yield value;\n                }\n            }\n        },\n    };\n}\nconst validRecordToStringValues = new Set([\n    \"[object Object]\",\n    \"[object Module]\",\n]);\n/**\n * Does the given object appear to be a record.\n */\nfunction isRecord(value) {\n    // All records are objects.\n    if (!validRecordToStringValues.has(Object.prototype.toString.call(value))) {\n        return false;\n    }\n    const { constructor } = value;\n    // If has modified constructor.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (constructor === undefined) {\n        return true;\n    }\n    // eslint-disable-next-line prefer-destructuring\n    const prototype = constructor.prototype;\n    // If has modified prototype.\n    if (prototype === null ||\n        typeof prototype !== \"object\" ||\n        !validRecordToStringValues.has(Object.prototype.toString.call(prototype))) {\n        return false;\n    }\n    // If constructor does not have an Object-specific method.\n    // eslint-disable-next-line sonarjs/prefer-single-boolean-return, no-prototype-builtins\n    if (!prototype.hasOwnProperty(\"isPrototypeOf\")) {\n        return false;\n    }\n    // Most likely a record.\n    return true;\n}\n\nconst defaultMergeFunctions = {\n    mergeMaps: defaultMergeMaps,\n    mergeSets: defaultMergeSets,\n    mergeArrays: defaultMergeArrays,\n    mergeRecords: defaultMergeRecords,\n    mergeOthers: leaf,\n};\n/**\n * Special values that tell deepmerge-ts to perform a certain action.\n */\nconst actions = {\n    defaultMerge: Symbol(\"deepmerge-ts: default merge\"),\n    skip: Symbol(\"deepmerge-ts: skip\"),\n};\n/**\n * The default function to update meta data.\n */\nfunction defaultMetaDataUpdater(previousMeta, metaMeta) {\n    return metaMeta;\n}\n/**\n * Deeply merge objects.\n *\n * @param objects - The objects to merge.\n */\nfunction deepmerge(...objects) {\n    return deepmergeCustom({})(...objects);\n}\nfunction deepmergeCustom(options, rootMetaData) {\n    const utils = getUtils(options, customizedDeepmerge);\n    /**\n     * The customized deepmerge function.\n     */\n    function customizedDeepmerge(...objects) {\n        return mergeUnknowns(objects, utils, rootMetaData);\n    }\n    return customizedDeepmerge;\n}\n/**\n * The the full options with defaults apply.\n *\n * @param options - The options the user specified\n */\nfunction getUtils(options, customizedDeepmerge) {\n    var _a, _b;\n    return {\n        defaultMergeFunctions,\n        mergeFunctions: {\n            ...defaultMergeFunctions,\n            ...Object.fromEntries(Object.entries(options)\n                .filter(([key, option]) => Object.prototype.hasOwnProperty.call(defaultMergeFunctions, key))\n                .map(([key, option]) => option === false ? [key, leaf] : [key, option])),\n        },\n        metaDataUpdater: ((_a = options.metaDataUpdater) !== null && _a !== void 0 ? _a : defaultMetaDataUpdater),\n        deepmerge: customizedDeepmerge,\n        useImplicitDefaultMerging: (_b = options.enableImplicitDefaultMerging) !== null && _b !== void 0 ? _b : false,\n        actions,\n    };\n}\n/**\n * Merge unknown things.\n *\n * @param values - The values.\n */\nfunction mergeUnknowns(values, utils, meta) {\n    if (values.length === 0) {\n        return undefined;\n    }\n    if (values.length === 1) {\n        return mergeOthers(values, utils, meta);\n    }\n    const type = getObjectType(values[0]);\n    // eslint-disable-next-line functional/no-conditional-statement -- add an early escape for better performance.\n    if (type !== 0 /* ObjectType.NOT */ && type !== 5 /* ObjectType.OTHER */) {\n        // eslint-disable-next-line functional/no-loop-statement -- using a loop here is more performant than mapping every value and then testing every value.\n        for (let m_index = 1; m_index < values.length; m_index++) {\n            if (getObjectType(values[m_index]) === type) {\n                continue;\n            }\n            return mergeOthers(values, utils, meta);\n        }\n    }\n    switch (type) {\n        case 1 /* ObjectType.RECORD */:\n            return mergeRecords(values, utils, meta);\n        case 2 /* ObjectType.ARRAY */:\n            return mergeArrays(values, utils, meta);\n        case 3 /* ObjectType.SET */:\n            return mergeSets(values, utils, meta);\n        case 4 /* ObjectType.MAP */:\n            return mergeMaps(values, utils, meta);\n        default:\n            return mergeOthers(values, utils, meta);\n    }\n}\n/**\n * Merge records.\n *\n * @param values - The records.\n */\nfunction mergeRecords(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeRecords(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeRecords !==\n                utils.defaultMergeFunctions.mergeRecords)) {\n        return utils.defaultMergeFunctions.mergeRecords(values, utils, meta);\n    }\n    return result;\n}\n/**\n * Merge arrays.\n *\n * @param values - The arrays.\n */\nfunction mergeArrays(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeArrays(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeArrays !==\n                utils.defaultMergeFunctions.mergeArrays)) {\n        return utils.defaultMergeFunctions.mergeArrays(values);\n    }\n    return result;\n}\n/**\n * Merge sets.\n *\n * @param values - The sets.\n */\nfunction mergeSets(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeSets(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeSets !== utils.defaultMergeFunctions.mergeSets)) {\n        return utils.defaultMergeFunctions.mergeSets(values);\n    }\n    return result;\n}\n/**\n * Merge maps.\n *\n * @param values - The maps.\n */\nfunction mergeMaps(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeMaps(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeMaps !== utils.defaultMergeFunctions.mergeMaps)) {\n        return utils.defaultMergeFunctions.mergeMaps(values);\n    }\n    return result;\n}\n/**\n * Merge other things.\n *\n * @param values - The other things.\n */\nfunction mergeOthers(values, utils, meta) {\n    const result = utils.mergeFunctions.mergeOthers(values, utils, meta);\n    if (result === actions.defaultMerge ||\n        (utils.useImplicitDefaultMerging &&\n            result === undefined &&\n            utils.mergeFunctions.mergeOthers !==\n                utils.defaultMergeFunctions.mergeOthers)) {\n        return utils.defaultMergeFunctions.mergeOthers(values);\n    }\n    return result;\n}\n/**\n * The default strategy to merge records.\n *\n * @param values - The records.\n */\nfunction defaultMergeRecords(values, utils, meta) {\n    const result = {};\n    /* eslint-disable functional/no-loop-statement, functional/no-conditional-statement -- using a loop here is more performant. */\n    for (const key of getKeys(values)) {\n        const propValues = [];\n        for (const value of values) {\n            if (objectHasProperty(value, key)) {\n                propValues.push(value[key]);\n            }\n        }\n        if (propValues.length === 0) {\n            continue;\n        }\n        const updatedMeta = utils.metaDataUpdater(meta, {\n            key,\n            parents: values,\n        });\n        const propertyResult = mergeUnknowns(propValues, utils, updatedMeta);\n        if (propertyResult === actions.skip) {\n            continue;\n        }\n        if (key === \"__proto__\") {\n            Object.defineProperty(result, key, {\n                value: propertyResult,\n                configurable: true,\n                enumerable: true,\n                writable: true,\n            });\n        }\n        else {\n            result[key] = propertyResult;\n        }\n    }\n    /* eslint-enable functional/no-loop-statement, functional/no-conditional-statement */\n    return result;\n}\n/**\n * The default strategy to merge arrays.\n *\n * @param values - The arrays.\n */\nfunction defaultMergeArrays(values) {\n    return values.flat();\n}\n/**\n * The default strategy to merge sets.\n *\n * @param values - The sets.\n */\nfunction defaultMergeSets(values) {\n    return new Set(getIterableOfIterables(values));\n}\n/**\n * The default strategy to merge maps.\n *\n * @param values - The maps.\n */\nfunction defaultMergeMaps(values) {\n    return new Map(getIterableOfIterables(values));\n}\n/**\n * Get the last value in the given array.\n */\nfunction leaf(values) {\n    return values[values.length - 1];\n}\n\nexport { deepmerge, deepmergeCustom };\n"]},"metadata":{},"sourceType":"module"}