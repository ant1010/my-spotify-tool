{"ast":null,"code":"var _jsxFileName = \"/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport SpotifyPlayer from \"react-spotify-web-playback\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SongPlayer(_ref) {\n  _s();\n\n  let {\n    Token,\n    trackUri\n  } = _ref;\n  const [play, setPlay] = useState(false);\n  console.log(trackUri);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!Token) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    styles: {\n      activeColor: '#fff',\n      bgColor: '',\n      color: '#fff',\n      loaderColor: '#fff',\n      sliderColor: '#1cb954',\n      trackArtistColor: '#ccc',\n      trackNameColor: '#fff'\n    },\n    Locale: \"Devices\",\n    token: Token,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: false,\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SongPlayer, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = SongPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SongPlayer\");","map":{"version":3,"sources":["/Users/antonyarreola/Documents/GitHub/spotify-clone/client/src/SongPlayer.js"],"names":["React","useState","useEffect","SpotifyPlayer","SongPlayer","Token","trackUri","play","setPlay","console","log","activeColor","bgColor","color","loaderColor","sliderColor","trackArtistColor","trackNameColor","state","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;AAEA,eAAe,SAASC,UAAT,OAAsC;AAAA;;AAAA,MAAlB;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP,GAAkB;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAJ,EAAAA,SAAS,CAAC,MAAMM,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AAEA,MAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AACZ,sBACE,QAAC,aAAD;AACA,IAAA,MAAM,EAAE;AACNM,MAAAA,WAAW,EAAE,MADP;AAENC,MAAAA,OAAO,EAAE,EAFH;AAGNC,MAAAA,KAAK,EAAE,MAHD;AAINC,MAAAA,WAAW,EAAE,MAJP;AAKNC,MAAAA,WAAW,EAAE,SALP;AAMNC,MAAAA,gBAAgB,EAAE,MANZ;AAONC,MAAAA,cAAc,EAAE;AAPV,KADR;AAUA,IAAA,MAAM,EAAG,SAVT;AAWE,IAAA,KAAK,EAAEZ,KAXT;AAYE,IAAA,YAAY,MAZd;AAaE,IAAA,QAAQ,EAAEa,KAAK,IAAI;AACjB,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBX,OAAO,CAAC,KAAD,CAAP;AACvB,KAfH;AAgBE,IAAA,IAAI,EAAE,KAhBR;AAiBE,IAAA,IAAI,EAAEF,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AAjBhC;AAAA;AAAA;AAAA;AAAA,UADF;AAqBH;;GA3BuBF,U;;KAAAA,U","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport SpotifyPlayer from \"react-spotify-web-playback\"\n\nexport default function SongPlayer({Token,trackUri}) {\n    const [play, setPlay] = useState(false)\n    console.log(trackUri);\n    useEffect(() => setPlay(true), [trackUri])\n    \n    if (!Token) return null\n    return (\n      <SpotifyPlayer\n      styles={{\n        activeColor: '#fff',\n        bgColor: '',\n        color: '#fff',\n        loaderColor: '#fff',\n        sliderColor: '#1cb954',\n        trackArtistColor: '#ccc',\n        trackNameColor: '#fff',\n      }}\n      Locale = \"Devices\"\n        token={Token}\n        showSaveIcon\n        callback={state => {\n          if (!state.isPlaying) setPlay(false)\n        }}\n        play={false}\n        uris={trackUri ? [trackUri] : []}\n      />\n    )\n}\n"]},"metadata":{},"sourceType":"module"}